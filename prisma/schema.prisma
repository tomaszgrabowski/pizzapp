// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Dish {
  id          String       @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  ingredients Ingredient[]
  orders      Order[]
  company     Company?     @relation(fields: [companyId], references: [id])
  companyId   String?
}

model Ingredient {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  pizzas      Dish[]
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
}

model Order {
  id        String   @id @default(cuid())
  address   String?
  phone     String?
  dishes    Dish[]
  status    String
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  table     Table?   @relation(fields: [tableId], references: [id])
  tableId   String?
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String
}

model Table {
  id        String   @id @default(cuid())
  name      String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

model Company {
  id         String       @id @default(cuid())
  name       String
  address    String
  phone      String
  tables     Table[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Dish       Dish[]
  Ingredient Ingredient[]
  Order      Order[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isCompany     Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
