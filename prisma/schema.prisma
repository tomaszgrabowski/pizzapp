// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Dish {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  ingredients Ingredient[]
  DishOnOrder DishOnOrder[]
}

model DishOnOrder {
  id        String   @id @default(cuid())
  dish      Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId    String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id          String @id @default(cuid())
  name        String
  description String
  image       String
  dishes      Dish[]
}

model Order {
  id          String        @id @default(cuid())
  status      String
  total       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  table       Table?        @relation(fields: [tableId], references: [id])
  tableId     String?
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  DishOnOrder DishOnOrder[]
}

model Table {
  id        String   @id @default(cuid())
  name      String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  oauth_token_secret String?
  oauth_token        String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String
  Order         Order[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
